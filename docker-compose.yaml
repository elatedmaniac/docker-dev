version: '3'

services:
  cloudflared:
    image: cloudflare/cloudflared:latest
    command: tunnel run --token ${CLOUDFLARE_TOKEN}
    container_name: cloudflared
    networks:
      default:
        ipv4_address: 172.18.0.2

  drawio:
    image: jgraph/drawio:latest
    container_name: drawio_container
    ports:
      - "8443:8443"
    environment:
      - PUBLIC_DNS=drawio.elatedmaniac.io
      - LETS_ENCRYPT_ENABLED=true
    networks:
      default:
        ipv4_address: 172.18.0.3

  anaconda:
    build:
      context: .
      dockerfile: Jupyter/Dockerfile
    container_name: anaconda_container
    ports:
      - "8888:8888"
    volumes:
      - ./Jupyter/data:/workspace
      - ./Jupyter/certs:/home/jupyter/.jupyter/ssl/
      - ./Jupyter/config/jupyter_application_config.py/:/home/jupyter/.jupyter/jupyter_application_config.py
      - ./logs:/workspace/logs
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
      - JUPYTER_PASSWORD=${JUPYTER_PASSWORD}
    deploy:
      resources:
        reservations:
          devices:
            - capabilities: [gpu]
    networks:
      default:
        ipv4_address: 172.18.0.4

  ollama:
    image: ollama/ollama:latest 
    container_name: ollama
    ports:
      - "11434:11434"
    volumes:
      - ./ollama/data:/root/.ollama
    deploy:
      resources:
        reservations:
          devices:
            - capabilities: [gpu]
    networks:
      default:
        ipv4_address: 172.18.0.5

  neo4j:
    build:
      context: ./neo4j
      args:
        NEO4J_AUTH: ${NEO4J_AUTH}
    container_name: neo4j_container
    ports:
      - "7474:7474"   # HTTP
      - "7473:7473"   # HTTPS
      - "7687:7687"   # Bolt
    environment:
      - NEO4J_AUTH=${NEO4J_AUTH}
      - NEO4J_PLUGINS=${NEO4J_PLUGINS}
    volumes:
      #- ./neo4j/data:/data
      - ./neo4j/logs:/logs
      - ./neo4j/import:/import
      - ./neo4j/plugins:/plugins
      - ./neo4j/certificates:/var/lib/neo4j/certificates
    networks:
      default:
        ipv4_address: 172.18.0.6

  nginx:
    build:
      context: ./Nginx
    container_name: nginx_proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/certificates:/etc/nginx/certificates
    depends_on:
      - anaconda
      - drawio
    networks:
      default:
        ipv4_address: 172.18.0.7

  streamlit:
    build:
      context: ./streamlit
    container_name: streamlit_manager
    ports:
      - "8501:8501"
    networks:
      default:
        ipv4_address: 172.18.0.8
  etl:
    build:
      context: ./etl
      dockerfile: ./Dockerfile
    image: etl_image
    container_name: etl
    volumes:
      - ./input_data:/etl/input
      - ./output_data:/etl/output
    networks:
      default:
        ipv4_address: 172.18.0.9

  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    networks:
      default:
        ipv4_address: 172.18.0.10

  airflow-webserver:
    build:
      context: ./airflow
      dockerfile: ./Dockerfile
    container_name: airflow-webserver
    depends_on:
      - postgres
    environment:
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    command: webserver
    networks:
      default:
        ipv4_address: 172.18.0.11

volumes:
  postgres-db-volume:

networks:
  default:
    driver: bridge
    ipam:
      config:
        - subnet: 172.18.0.0/24
